#coding=utf-8

"""
Utitlity functions.

functions:
    cycle_up_to(iterable, limit) - like itertools.cycle with a limit
    cycle_while(pred, iterable) - like itertools.takewhile but indefinitely
                                  cycle through the iterable
    ceil_to_odd(dec) - returns the nearest bigger odd int
    nearest(point, vect, metric) - get the nearest point between a given point 
                                   and a vector
"""

import math
import itertools
import logging
logger = logging.getLogger(__name__)

from scipy.spatial.distance import euclidean

def cycle_up_to(iterable, limit):
    for i in itertools.takewhile(
            lambda x: x[0] < limit,
            enumerate(itertools.cycle(iterable))):
        yield i[1]

def cycle_while(pred, iterable):
    for i in itertools.takewhile(
             lambda x: pred(x), 
             itertools.cycle(iterable)):
        yield i

def ceil_to_odd(dec):
    """
    @param: a floating point number
    @return: the minor integer odd number greater then dec.
    """
    n = math.ceil(dec)
    if n % 2 == 0:
        return int(n + 1)
    else:
        return int(n)

def extrude_from_rectangle(x, y, extremes, delta):
    """
    project a point to the nearest side of a containing rectangle defined by the
    point in extremes
    @param x: x coordinate of the inner point
    @param y: y coordinate of the inner point
    @param extremes: [[x0, y0], ... [x[3],y[3]] coordinates of the extremes of a
    rectangle containing the point
    @param delta: how much to extrude the point from the polygon
    """
    delta_x = [abs(x - e[0]) for e in extremes]
    delta_y = [abs(y - e[1]) for e in extremes]
    minx = min(delta_x)
    miny = min(delta_y)
    if minx <= miny:
        _x = extremes[delta_x.index(minx)][0]
        if _x <= x:
            _x -= delta
        else:
            _x += delta
        ext = [_x, y]
    else:
        _y = extremes[delta_y.index(miny)][1]
        if _y <= y:
            _y -= delta
        else:
            _y += delta
        ext = [x, _y]
    return ext

def nearest(point, vect, metric=euclidean):
    """
    Returns the point in vect whose distance from point is the minimum.
    Metric is a function of two points which returns their distance.
    If no metric is specified defaults to euclidean distance
    """
    dist = [metric(point, p) for p in vect]
    return min(dist)

def offsets_grid(dim_x, dim_y, delta):
    """
    @param dim_x: the dimension along the longitude (must be ODD)
    @param dim_y: the dimension along the latitude (numt be ODD)
    @param delta: angular separation between each point of the map
    @return: the matrix containing the coordinates of the map on a plan grid
    """
    #remember index_max == dimension_max - 1!!
    grid = [[(0,0) for _ in range(dim_x)] for _ in range(dim_y)]
    center_x = dim_x // 2 #integer ratio
    center_y = dim_y // 2 #integer ratio
    for i in range(center_y + 1):
        for j in range(center_x + 1):
            grid[center_y + i][center_x + j] = [+ j * delta, - i * delta]
            grid[center_y - i][center_x - j] = [- j * delta, + i * delta]
            grid[center_y + i][center_x - j] = [- j * delta, - i * delta]
            grid[center_y - i][center_x + j] = [+ j * delta, + i * delta]
    return grid

def tsys_offsets_grid(map_grid, distance):
    tsys_points = []
    for p in map_grid[0]:
        tsys_points.append([p[0], p[1] + distance])
    for p in [m[-1] for m in map_grid[1:-1]]:
        tsys_points.append([p[0] + distance, p[1]])
    for p in reversed(map_grid[-1]):
        tsys_points.append([p[0], p[1] - distance])
    for p in reversed([m[0] for m in map_grid[1:-1]]):
        tsys_points.append([p[0] - distance, p[1]])
    return tsys_points


def plot_grid(grid, tsys=True):
    import matplotlib
    matplotlib.use('Qt4Agg')
    import matplotlib.pyplot as plt
    from matplotlib.patches import Circle
    x_data, y_data = [],[]
    for i,line in enumerate(grid):
        if i % 2 == 0:
            _l = iter(line)
        else:
            _l = reversed(line)
        for l in _l:
            x_data.append(l[0])
            y_data.append(l[1])
    center = [x_data[len(x_data)//2], y_data[len(y_data)//2]]
    sigma3 = abs(x_data[1] - x_data[0]) * 3 / 2.0
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.add_patch(Circle(center, sigma3, alpha=0.3, color="red"))
    ax.plot(x_data, y_data, 'bo--')
    if tsys:
        tsys_grid = tsys_offsets_grid(grid, sigma3)
        x_tsys = [t[0] for t in tsys_grid]
        y_tsys = [t[1] for t in tsys_grid]
        ax.plot(x_tsys, y_tsys, 'go')
    ax.margins(0.1, tight=None)
    plt.grid()
    plt.show()
    return ax

def test_distance():
    from random import randint
    import matplotlib
    matplotlib.use('Qt4Agg')
    import matplotlib.pyplot as plt
    from matplotlib.patches import Circle
    def random_point(mm=0,m=10):
        return [randint(0, m), randint(0, m)]
    def random_line(dim=10, m=10):
        return [random_point(0,m) for _ in range(dim)]
    point = random_point(0, 100)
    line = random_line(50, 40)
    n = nearest(point, line)
    x_data = [l[0] for l in line]
    y_data = [l[1] for l in line]
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.plot(x_data, y_data, 'bo')
    ax.plot(point[0], point[1], 'ro')
    ax.plot(n[0], n[1], 'go')
    ax.add_patch(Circle(point, euclidean(point, n), alpha=0.3, color="red"))
    ax.margins(0.1, tight=None)
    plt.grid()
    plt.show()
    return ax

def cmp_key(a, b):
    if a[0] < b[0]:
        return -1
    elif a[0] == b[0]:
        return 0
    else:
        return 1

class KVTable(object):
    def __init__(self, kvtable):
        """
        kvtable is a [(k,v), (k1, v1) ... ] list of key-value pairs
        """
        self.table = kvtable
        self.table.sort(cmp=cmp_key)

    def nearest(self, key):
        return self.table[self._nearest_index(key)][1]

    def _nearest_index(self, key):
        diffs = [abs(key - t[0]) for t in self.table]
        return diffs.index(min(diffs))

if __name__ == '__main__':
    grid = offsets_grid(11, 21, 2.5)
    plot_grid(grid)
    #test_distance()


